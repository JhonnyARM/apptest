jobs:
  comment-run:
    runs-on: ubuntu-latest # Especifica solo Ubuntu
    strategy:
      fail-fast: false
      max-parallel: 1 # Solo ejecuta un job a la vez
    name: Pytest Appium Repo on Ubuntu
    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.commit_sha }}

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Especifica la versiÃ³n de Python que prefieres

      - name: Install dependencies
        run: python -m pip install -r requirements.txt

      - name: run tests in parallel on android
        run: |
          cd android
          browserstack-sdk pytest -s bstack_sample.py

      - name: run local tests in parallel on android
        run: |
          cd android
          browserstack-sdk pytest -s bstack_sample_local.py --browserstack.app "./LocalSample.apk"

      - name: run tests in parallel on ios
        run: |
          cd ios
          browserstack-sdk pytest -s bstack_sample.py

      - name: run local tests in parallel on ios
        run: |
          cd ios
          browserstack-sdk pytest -s bstack_sample_local.py --browserstack.app "./LocalSample.ipa"

      - if: always()
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        id: status-check-completed
        env:
          conclusion: ${{ job.status }}
          job_name: Pytest Appium Repo on Ubuntu
          commit_sha: ${{ github.event.inputs.commit_sha }}
        with:
          github-token: ${{ github.token }}
          script: |
            const result = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: process.env.job_name,
              head_sha: process.env.commit_sha,
              status: 'completed',
              conclusion: process.env.conclusion
            }).catch((err) => ({status: err.status, response: err.response}));
            console.log(`The status-check response : ${result.status} Response : ${JSON.stringify(result.response)}`)
            if (result.status !== 201) {
              console.log('Failed to create check run')
            }
